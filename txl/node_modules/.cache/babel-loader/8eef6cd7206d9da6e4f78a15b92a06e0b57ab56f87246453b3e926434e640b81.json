{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport $request from '../utils/request';\nimport request from '../utils/request';\nexport default {\n  data() {\n    return {\n      contacts: [],\n      // 存储联系人数据\n      filteredContacts: [],\n      // 存储筛选后的联系人数据\n      searchQuery: '',\n      // 查询关键词\n      dialogVisible: false,\n      // 控制弹窗显示\n      contactForm: {\n        // 联系人表单\n        id: null,\n        name: '',\n        phone: '',\n        email: '',\n        address: ''\n      },\n      currentPage: 1,\n      // 当前页码\n      pageSize: 10,\n      // 每页显示的联系人数量\n      isEditing: false // 标识当前是添加还是编辑状态\n    };\n  },\n  created() {\n    this.fetchContacts();\n  },\n  computed: {\n    paginatedContacts() {\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = this.currentPage * this.pageSize;\n      return this.filteredContacts.slice(start, end);\n    }\n  },\n  mounted() {\n    request.get(`/user/selectAll`).then(res => {\n      this.users = res.data;\n    });\n  },\n  methods: {\n    // 获取联系人列表\n    fetchContacts() {\n      request.get('/user/selectAll').then(response => {\n        this.contacts = response.data;\n        this.filteredContacts = response.data; // 初始化筛选结果\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    // 显示添加联系人弹窗\n    showAddDialog() {\n      this.isEditing = false;\n      this.contactForm = {\n        id: null,\n        name: '',\n        phone: '',\n        email: '',\n        address: '',\n        photo: ''\n      };\n      this.dialogVisible = true;\n    },\n    // 编辑联系人\n    editContact(contact) {\n      this.contactForm = JSON.parse(JSON.stringify(contact));\n      this.isEditing = true;\n      this.dialogVisible = true;\n    },\n    // 提交表单\n    submitForm() {\n      if (this.isEditing) {\n        this.updateContact();\n      } else {\n        this.addContact();\n      }\n    },\n    // 添加联系人\n    addContact() {\n      request.post(`/user/add`, this.contactForm).then(res => {\n        this.contacts.push(res.data);\n        this.filteredContacts.push(res.data);\n        this.dialogVisible = false;\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    // 更新联系人\n    updateContact() {\n      request.put(`/user/update${this.contactForm.id}`, this.contactForm).then(() => {\n        const index = this.contacts.findIndex(c => c.id === this.contactForm.id);\n        this.$set(this.contacts, index, this.contactForm);\n        this.filterContacts(); // 更新后重新过滤\n        this.dialogVisible = false;\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    // 删除联系人\n    deleteContact(id) {\n      request.delete(`/user/delete` + id).then(() => {\n        this.contacts = this.contacts.filter(c => c.id !== id);\n        this.filterContacts(); // 删除后重新过滤\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    // 过滤联系人\n    filterContacts() {\n      const query = this.searchQuery.toLowerCase();\n      this.filteredContacts = this.contacts.filter(contact => {\n        return contact.name.toLowerCase().includes(query) || contact.phone.includes(query) || contact.email.toLowerCase().includes(query) || contact.address.toLowerCase().includes(query);\n      });\n      this.currentPage = 1; // 搜索时重置页码为第一页\n    },\n    // 处理页码变化\n    handlePageChange(page) {\n      this.currentPage = page;\n    },\n    // 显示通讯录页面\n    showContactPage() {\n      console.log('显示通讯录页面');\n    }\n  }\n};","map":{"version":3,"names":["axios","$request","request","data","contacts","filteredContacts","searchQuery","dialogVisible","contactForm","id","name","phone","email","address","currentPage","pageSize","isEditing","created","fetchContacts","computed","paginatedContacts","start","end","slice","mounted","get","then","res","users","methods","response","catch","error","console","showAddDialog","photo","editContact","contact","JSON","parse","stringify","submitForm","updateContact","addContact","post","push","put","index","findIndex","c","$set","filterContacts","deleteContact","delete","filter","query","toLowerCase","includes","handlePageChange","page","showContactPage","log"],"sources":["src/views/form.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <el-container>\r\n      <!-- 头栏 -->\r\n      <el-header height=\"60px\" class=\"header\">\r\n        <div class=\"header-title\">通讯录管理系统</div>\r\n      </el-header>\r\n\r\n      <!-- 侧边栏和内容 -->\r\n      <el-container>\r\n        <!-- 侧边栏 -->\r\n        <el-aside width=\"200px\" class=\"sidebar\">\r\n          <el-menu default-active=\"1\" class=\"el-menu-vertical-demo\">\r\n            <el-menu-item index=\"1\" @click=\"showContactPage\">\r\n              <i class=\"el-icon-user\"></i>\r\n              <span>通讯录</span>\r\n            </el-menu-item>\r\n            <el-menu-item index=\"2\">\r\n              <i class=\"el-icon-setting\"></i>\r\n              <span>设置</span>\r\n            </el-menu-item>\r\n          </el-menu>\r\n        </el-aside>\r\n\r\n        <!-- 内容 -->\r\n        <el-main>\r\n          <!-- 查询框 -->\r\n          <el-row :gutter=\"20\" class=\"search-row\">\r\n            <el-col :span=\"12\">\r\n              <el-input\r\n                v-model=\"searchQuery\"\r\n                placeholder=\"请输入姓名、电话、邮箱或地址进行搜索\"\r\n                prefix-icon=\"el-icon-search\"\r\n                @input=\"filterContacts\"\r\n              />\r\n            </el-col>\r\n            <el-col :span=\"12\" class=\"header-buttons\">\r\n              <el-button type=\"primary\" icon=\"el-icon-plus\" @click=\"showAddDialog\">添加联系人</el-button>\r\n            </el-col>\r\n          </el-row>\r\n\r\n          <!-- 联系人表格 -->\r\n          <el-table :data=\"paginatedContacts\" border stripe style=\"width: 100%; margin-top: 20px;\">\r\n            <el-table-column prop=\"name\" label=\"姓名\" width=\"150\"></el-table-column>\r\n            <el-table-column prop=\"phone\" label=\"电话\" width=\"150\"></el-table-column>\r\n            <el-table-column prop=\"email\" label=\"邮箱\" width=\"200\"></el-table-column>\r\n            <el-table-column prop=\"address\" label=\"地址\" width=\"250\"></el-table-column>\r\n            <el-table-column label=\"操作\" width=\"180\">\r\n              <template slot-scope=\"scope\">\r\n                <el-button type=\"text\" size=\"small\" @click=\"editContact(scope.row)\">编辑</el-button>\r\n                <el-button type=\"text\" size=\"small\" @click=\"deleteContact(scope.row.id)\">删除</el-button>\r\n              </template>\r\n            </el-table-column>\r\n          </el-table>\r\n\r\n          <!-- 分页 -->\r\n          <el-pagination\r\n            background\r\n            layout=\"prev, pager, next\"\r\n            :total=\"filteredContacts.length\"\r\n            :page-size=\"pageSize\"\r\n            :current-page.sync=\"currentPage\"\r\n            @current-change=\"handlePageChange\"\r\n            class=\"pagination\"\r\n          />\r\n        </el-main>\r\n      </el-container>\r\n    </el-container>\r\n\r\n    <!-- 添加/编辑联系人对话框 -->\r\n    <el-dialog :visible.sync=\"dialogVisible\" title=\"联系人信息\" width=\"500px\" class=\"contact-dialog\">\r\n      <el-form :model=\"contactForm\" label-width=\"80px\" class=\"contact-form\">\r\n        <el-form-item label=\"姓名\">\r\n          <el-input v-model=\"contactForm.name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"电话\">\r\n          <el-input v-model=\"contactForm.phone\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"邮箱\">\r\n          <el-input v-model=\"contactForm.email\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"地址\">\r\n          <el-input v-model=\"contactForm.address\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"submitForm\">确定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport $request from '../utils/request';\r\nimport request from '../utils/request';\r\nexport default {\r\n  data() {\r\n    return {\r\n      contacts: [], // 存储联系人数据\r\n      filteredContacts: [], // 存储筛选后的联系人数据\r\n      searchQuery: '', // 查询关键词\r\n      dialogVisible: false, // 控制弹窗显示\r\n      contactForm: { // 联系人表单\r\n        id: null,\r\n        name: '',\r\n        phone: '',\r\n        email: '',\r\n        address: ''\r\n      },\r\n      currentPage: 1, // 当前页码\r\n      pageSize: 10, // 每页显示的联系人数量\r\n      isEditing: false // 标识当前是添加还是编辑状态\r\n    };\r\n  },\r\n  created() {\r\n    this.fetchContacts();\r\n  },\r\n  computed: {\r\n    paginatedContacts() {\r\n      const start = (this.currentPage - 1) * this.pageSize;\r\n      const end = this.currentPage * this.pageSize;\r\n      return this.filteredContacts.slice(start, end);\r\n    }\r\n  },\r\n  mounted(){\r\n        request.get(`/user/selectAll`).then(res => {\r\n            this.users = res.data\r\n        })\r\n    },\r\n  methods: {\r\n   // 获取联系人列表\r\n   fetchContacts() {\r\n        request.get('/user/selectAll')\r\n          .then(response => {\r\n            this.contacts = response.data;\r\n            this.filteredContacts = response.data; // 初始化筛选结果\r\n          })\r\n          .catch(error => {\r\n            console.error(error);\r\n          });\r\n      },\r\n      // 显示添加联系人弹窗\r\n      showAddDialog() {\r\n        this.isEditing = false;\r\n        this.contactForm = { id: null, name: '', phone: '', email: '', address: '', photo: '' };\r\n        this.dialogVisible = true;\r\n      },\r\n      // 编辑联系人\r\n      editContact(contact) {\r\n        this.contactForm = JSON.parse(JSON.stringify(contact));\r\n        this.isEditing = true;\r\n        this.dialogVisible = true;\r\n      },\r\n      // 提交表单\r\n      submitForm() {\r\n        if (this.isEditing) {\r\n          this.updateContact();\r\n        } else {\r\n          this.addContact();\r\n        }\r\n      },\r\n      // 添加联系人\r\n      addContact() {\r\n        request.post(`/user/add`,this.contactForm)\r\n          .then(res => {\r\n            this.contacts.push(res.data);\r\n            this.filteredContacts.push(res.data);\r\n            this.dialogVisible = false;\r\n          })\r\n          .catch(error => {\r\n            console.error(error);\r\n          });\r\n      },\r\n      // 更新联系人\r\n      updateContact() {\r\n        request.put(`/user/update${this.contactForm.id}`, this.contactForm)\r\n          .then(() => {\r\n            const index = this.contacts.findIndex(c => c.id === this.contactForm.id);\r\n            this.$set(this.contacts, index, this.contactForm);\r\n            this.filterContacts(); // 更新后重新过滤\r\n            this.dialogVisible = false;\r\n          })\r\n          .catch(error => {\r\n            console.error(error);\r\n          });\r\n      },\r\n      // 删除联系人\r\n      deleteContact(id) {\r\n        request.delete(`/user/delete` + id)\r\n          .then(() => {\r\n            this.contacts = this.contacts.filter(c => c.id !== id);\r\n            this.filterContacts(); // 删除后重新过滤\r\n          })\r\n          .catch(error => {\r\n            console.error(error);\r\n          });\r\n      },\r\n    // 过滤联系人\r\n    filterContacts() {\r\n      const query = this.searchQuery.toLowerCase();\r\n      this.filteredContacts = this.contacts.filter(contact => {\r\n        return (\r\n          contact.name.toLowerCase().includes(query) ||\r\n          contact.phone.includes(query) ||\r\n          contact.email.toLowerCase().includes(query) ||\r\n          contact.address.toLowerCase().includes(query)\r\n        );\r\n      });\r\n      this.currentPage = 1; // 搜索时重置页码为第一页\r\n    },\r\n    // 处理页码变化\r\n    handlePageChange(page) {\r\n      this.currentPage = page;\r\n    },\r\n    // 显示通讯录页面\r\n    showContactPage() {\r\n      console.log('显示通讯录页面');\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.header {\r\n  background-color: #409EFF;\r\n  color: white;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0 20px;\r\n}\r\n\r\n.header-title {\r\n  font-size: 20px;\r\n}\r\n\r\n.sidebar {\r\n  background-color: #2d3a4b;\r\n  color: white;\r\n}\r\n\r\n.search-row {\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.header-buttons {\r\n  text-align: right;\r\n}\r\n\r\n.el-table {\r\n  margin-top: 20px;\r\n}\r\n\r\n.pagination {\r\n  margin-top: 20px;\r\n  text-align: right;\r\n}\r\n\r\n.contact-dialog {\r\n  padding-bottom: 0 !important;\r\n}\r\n\r\n.contact-form {\r\n  max-height: 300px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.dialog-footer {\r\n  text-align: right;\r\n}\r\n\r\n.el-input {\r\n  width: 100%;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}